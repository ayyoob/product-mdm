<%
/*
 * Copyright (c) 2015, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.
 *
 * WSO2 Inc. licenses this file to you under the Apache License,
 * Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,
 * either express or implied. See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */

var uri = request.getRequestURI();
var uriMatcher = new URIMatcher(String(uri));

var log = new Log("api/user-api.jag");

var constants = require("/modules/constants.js");
var dcProps = require('/config/dc-props.js').config();
var userModule = require("/modules/user.js").userModule;
var utility = require("/modules/utility.js").utility;

var result;

if (uriMatcher.match("/{context}/api/user/login/")) {

	var username = request.getParameter("username");
	var password = request.getParameter("password");

	try {
		userModule.login(username, password, function (user) {
			utility.insertAppPermissions(userModule, "login");
			if (log.isDebugEnabled()) {
				log.debug("User Logged In : " + user);
			}
			response.sendRedirect(constants.WEB_APP_CONTEXT);
		}, function () {
			response.sendRedirect(dcProps.appContext + "login?#auth-failed");
		});
	} catch (e) {
		log.error("Exception occurred while a user tried to login to DC", e);
		response.sendRedirect(dcProps.appContext + "login?#error");
	}

} else if (uriMatcher.match("/{context}/api/user/logout/")) {

	userModule.logout(function () {
		response.sendRedirect(dcProps.appContext + "login");
	});

} else if (uriMatcher.match("/{context}/api/users/register")) {

	addUserFormData = request.getContent();
	username = addUserFormData.username;
	firstname = addUserFormData.firstname;
	lastname = addUserFormData.lastname;
	emailAddress = addUserFormData.emailAddress;
	password = addUserFormData.password;

	if (!addUserFormData.userRoles) {
		userRoles = null;
	} else {
		userRoles = String(addUserFormData.userRoles).split(",");
	}

	try {
		result = userModule.registerUser(username, firstname, lastname, emailAddress, password,
				userRoles);
	} catch (e) {
		log.error("Exception occurred while trying to registering a new user to DC User Store", e);
		// http status code 400 refers to - Bad request.
		result = 400;
	}

} else if (uriMatcher.match("/{context}/api/users/add")) {

	if (userModule.isAuthorized("/permission/device-mgt/admin/users/add")) {

		addUserFormData = request.getContent();
		username = addUserFormData.username;
		firstname = addUserFormData.firstname;
		lastname = addUserFormData.lastname;
		emailAddress = addUserFormData.emailAddress;

		if (!addUserFormData.userRoles) {
			userRoles = null;
		} else {
			userRoles = String(addUserFormData.userRoles).split(",");
		}

		try {
			result = userModule.addUser(username, firstname, lastname, emailAddress, userRoles);
		} catch (e) {
			log.error("Exception occurred while trying to add a user to DC User Store", e);
			// http status code 400 refers to - Bad request.
			result = 400;
		}
	} else {
		// http status code 403 refers to - forbidden.
		result = 403;
	}

} else if (uriMatcher.match("/{context}/api/users/{username}/remove")) {

	if (userModule.isAuthorized("/permission/device-mgt/admin/users/remove")) {

		elements = uriMatcher.elements();
		username = elements.username;

		try {
			result = userModule.removeUser(username);
		} catch (e) {
			log.error("Exception occurred while trying to remove a user from DC User Store", e);
			// http status code 400 refers to - Bad request.
			result = 400;
		}

	} else {
		// http status code 403 refers to - forbidden.
		result = 403;
	}

}

// returning the result.
if (result) {
	print(result);
}
%>
