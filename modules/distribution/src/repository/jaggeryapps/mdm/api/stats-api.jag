<%
/*
 * Copyright (c) 2015, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.
 *
 * WSO2 Inc. licenses this file to you under the Apache License,
 * Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,
 * either express or implied. See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */

var uri = request.getRequestURI();
var uriMatcher = new URIMatcher(String(uri));

var log = new Log("api/stats-api.jag");

var constants = require("/modules/constants.js");
var dcProps = require('/config/mdm-props.js').config();
var utility = require("/modules/utility.js").utility;

var result;
var statsClient = new Packages.org.wso2.carbon.device.mgt.iot.common.devicecloud.usage.statistics.IoTUsageStatisticsClient;

if (uriMatcher.match("/{context}/api/stats")) {

	deviceId = request.getParameter("deviceId");
	deviceType = request.getParameter("deviceType");
	from = request.getParameter("from");
	to = request.getParameter("to");

	user = session.get(constants.USER_SESSION_KEY);
	if (!user) {
		response.sendRedirect(dcProps.appContext + "login?#login-required");
		exit();
	}

	log.info("deviceId : " + deviceId + " from : " + from + " to : " + to);
	if(deviceType=="firealarm"){
		result = getFireAlarmData(user.username, deviceId, from, to);
	}else if(deviceType=="sensebot"){
		result = getSensebotData(user.username, deviceId, from, to);
	}
}

// returning the result.
if (result) {
	print(result);
}

function getSensebotData(user, deviceId, from, to){
	result = new Object();
	result['sonarData'] = getSensorData("SONAR_SENSOR_SUMMARY","sonar",user, deviceId, from, to);
	result['motionData'] = getSensorData("PIR_MOTION_SENSOR_SUMMARY","motion",user, deviceId, from, to);
	result['lightData'] = getSensorData("LDR_LIGHT_SENSOR_SUMMARY","light",user, deviceId, from, to);
	result['temperatureData'] = getSensorData("DEVICE_TEMPERATURE_SUMMARY","TEMPERATURE",user, deviceId, from, to);
	return result;
}


function getFireAlarmData(user, deviceId, from, to){
	result = new Object();

	//result['sonarData'] = getSensorData("SONAR_SENSOR_SUMMARY","sonar",user, deviceId, from, to);
	//result['motionData'] = getSensorData("PIR_MOTION_SENSOR_SUMMARY","motion",user, deviceId, from, to);
	//result['lightData'] = getSensorData("LDR_LIGHT_SENSOR_SUMMARY","light",user, deviceId, from, to);

	result['temperatureData'] = getSensorData("DEVICE_TEMPERATURE_SUMMARY","TEMPERATURE",user, deviceId, from, to);
	result['fanData'] = getSensorData("DEVICE_FAN_USAGE_SUMMARY","status",user, deviceId, from, to);
	result['bulbData'] = getSensorData("DEVICE_BULB_USAGE_SUMMARY","status",user, deviceId, from, to);
	return result;
}

function getSensorData(table, column, user, deviceId, from, to) {

	var fetchedData = null;

	try {
		fetchedData = statsClient.getDeviceStats(table, column, user, deviceId, from, to);
	}catch(error){
		log.info(error);
	}

	var temperatureData = [];

	if(fetchedData==null) return [];

	for (var i = 0; i < fetchedData.size(); i++) {
		temperatureData.push({
			time: fetchedData.get(i).getTime(),
			value: fetchedData.get(i).getValue()
		});
	}

	return temperatureData;
}

%>