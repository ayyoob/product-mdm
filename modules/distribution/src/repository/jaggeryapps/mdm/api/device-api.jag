<%
/*
 * Copyright (c) 2015, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.
 *
 * WSO2 Inc. licenses this file to you under the Apache License,
 * Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,
 * either express or implied. See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */

var uri = request.getRequestURI();
var uriMatcher = new URIMatcher(String(uri));

var log = new Log("api/device-api.jag");

var deviceModule = require("/modules/device.js").deviceModule;
var userModule = require("/modules/user.js").userModule;

var carbon = require('carbon');
var constants = require("/modules/constants.js");
var carbonHttpServletTransport = carbon.server.address('http');
var carbonHttpsServletTransport = carbon.server.address('https');

var result;

if (uriMatcher.match("/{context}/api/devices/")) {
    /*
     @Deprecated
     */
    if (userModule.isAuthorized("/permission/device-mgt/admin/devices/list")) {
        result = deviceModule.listDevices();
    } else {
        response.sendError(403);
    }
} else if (uriMatcher.match("/{context}/api/devices/{type}/{deviceId}")) {
    elements = uriMatcher.elements();
    deviceId = elements.deviceId;
    type = elements.type;
    if (userModule.isAuthorized("/permission/device-mgt/admin/devices/list")) {
        result = deviceModule.viewDevice(type, deviceId);
    }else {
        response.sendError(403);
    }
} else if (uriMatcher.match("/{context}/api/device/sketch/download")) {
    sketchType = request.getParameter("sketchType");
    deviceType = request.getParameter("deviceType");

    if (!sketchType) {
        log.error("Sketch Type is empty");
    }

    var user = session.get(constants.USER_SESSION_KEY);
    if (!user) {
        response.sendRedirect(dcProps.appContext + "login?#login-required");
        exit();
    }

    //URL: https://localhost:9443/{deviceType}/download?owner={username}
    deviceManagerService = carbonHttpsServletTransport + "/" + deviceType + "/manager";
    sketchDownloadEndPoint = deviceManagerService + "/device/" + sketchType + "/download";
    response.sendRedirect(sketchDownloadEndPoint + "?owner=" + user.username);
    exit();//stop execution

} else if (uriMatcher.match("/{context}/api/devices/all")) {
    var user = session.get(constants.USER_SESSION_KEY);
    if (!user) {
        response.sendRedirect(dcProps.appContext + "login?#login-required");
        exit();//stop execution
    }

    //URL: https://localhost:9443/devicecloud/manager/devices/username/{username}
    deviceCloudService = carbonHttpsServletTransport + "/devicecloud/manager";
    listAllDevicesEndPoint = deviceCloudService + "/devices/username/" + user.username;

    var data = {};
    //XMLHTTPRequest's GET
    result = get(listAllDevicesEndPoint, data, "json");

} else if (uriMatcher.match("/{context}/api/devices/types")) {
    var user = session.get(constants.USER_SESSION_KEY);
    if (!user) {
        response.sendRedirect(dcProps.appContext + "login?#login-required");
        exit();//stop execution
    }

    result = deviceModule.getAllDevicesTypes();
} else if (uriMatcher.match("{context}/api/devices/{type}/{deviceId}/{operation}")) {
    elements = uriMatcher.elements();
    deviceId = elements.deviceId;
    type = elements.type;
    operation = elements.operation;
    if (userModule.isAuthorized("/permission/device-mgt/admin/devices/operation")) {
        result = deviceModule.performOperation(deviceId, operation, [], type);
    } else {
        response.sendError(403);
    }
}

if (result){
    print(result);
}
%>